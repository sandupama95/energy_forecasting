# src/preprocess.py

import numpy as np

def engineer_features(df):
    """
    Input: DataFrame with at least these columns:
       - Date (datetime)
       - Load (MWh)
       - Temperature, Cloudiness, Irradiation, PublicHoliday (if present)
    Output: DataFrame with new engineered columns; rows with NaN from shifting are dropped.
    """
    df = df.copy()
    # Basic temporal features
    df["hour"] = df["Date"].dt.hour
    df["dayofweek"] = df["Date"].dt.dayofweek
    df["month"] = df["Date"].dt.month
    df["is_weekend"] = (df["dayofweek"] >= 5).astype(int)
    df["year"] = df["Date"].dt.year
    df["date_only"] = df["Date"].dt.date

    # Cyclical encoding
    df["hour_sin"] = np.sin(2 * np.pi * df["hour"] / 24)
    df["hour_cos"] = np.cos(2 * np.pi * df["hour"] / 24)
    df["dow_sin"] = np.sin(2 * np.pi * df["dayofweek"] / 7)
    df["dow_cos"] = np.cos(2 * np.pi * df["dayofweek"] / 7)

    # Lag features for Load
    df["lag_1"] = df["Load"].shift(1)
    df["lag_24"] = df["Load"].shift(24)
    df["lag_168"] = df["Load"].shift(168)

    # Lag features for Temperature, Irradiation, Cloudiness (if they exist)
    if "Temperature" in df.columns:
        df["temp_lag_1"] = df["Temperature"].shift(1)
        df["temp_lag_24"] = df["Temperature"].shift(24)
    if "Irradiation" in df.columns:
        df["irr_lag_1"] = df["Irradiation"].shift(1)
        df["irr_lag_24"] = df["Irradiation"].shift(24)
    if "Cloudiness" in df.columns:
        df["cloud_lag_1"] = df["Cloudiness"].shift(1)
        df["cloud_lag_24"] = df["Cloudiness"].shift(24)

    # Rolling window features (Load)
    df["load_roll_3h"] = df["Load"].rolling(window=3).mean()
    df["load_roll_6h"] = df["Load"].rolling(window=6).mean()
    df["load_roll_24h"] = df["Load"].rolling(window=24).mean()

    # Rolling features for Temperature, Irradiation, Cloudiness
    if "Temperature" in df.columns:
        df["temp_roll_6h"] = df["Temperature"].rolling(window=6).mean()
    if "Irradiation" in df.columns:
        df["irr_roll_6h"] = df["Irradiation"].rolling(window=6).mean()
    if "Cloudiness" in df.columns:
        df["cloud_roll_6h"] = df["Cloudiness"].rolling(window=6).mean()

    # Interaction features
    if "Temperature" in df.columns and "Irradiation" in df.columns:
        df["temp_x_irr"] = df["Temperature"] * df["Irradiation"]
    if "Temperature" in df.columns:
        df["weekend_temp"] = df["is_weekend"] * df["Temperature"]

    # Drop NaNs generated by shift/rolling
    df = df.dropna().reset_index(drop=True)
    return df
